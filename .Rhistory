}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[2], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[2], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
# Rolling correlation
plot(rollapply(price_cov, width = 120, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
# Rolling correlation
plot(rollapply(price_cov, width = 12, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
### Monthly Correlation ###
corr_freq = "Monthly"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(monthlyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] <-  paste(ticker, glue('.{corr_freq}Ret'), sep='')
#drop NAs
df <- na.omit(df)
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[2], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[2], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
# Rolling correlation
plot(rollapply(price_cov, width = 120, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Set Perpetual Prudence Themes
theme_set(theme_minimal())
set.seed(336)
#For resetting par - dev.off()
par(family = "serif")
options(scipen = 0.5)
# Import required packages
#install.packages('quantmod')
#install.packages("devtools")
library(quantmod)
#library(tidyverse)
library(glue)
library(zoo)
# List of companies to look at: https://www.fidelity.co.uk/shares/ftse-100/
# https://dailypik.com/uk100-companies/
### Daily Correlation ###
corr_freq = "Daily"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(dailyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] = paste(ticker, glue('.{corr_freq}Ret'), sep='')
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[3], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[4], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
cor(price_cov[1], price_cov[4], method = 'pearson')
# Rolling correlation
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
roll_corr <- rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE)
roll_corr
length(roll_corr)
cov_mat["Date"]
length(cov_mat["Date"])
cov_mat["Date"]
num.rows(cov_mat["Date"])
nrows(cov_mat["Date"])
nrow(cov_mat["Date"])
nrow(cov_mat["Date"]) - length(roll_corr)
cov_mat["Date"][1:3]
cov_mat["Date"][1]
cov_mat["Date"][1][1:3]
vector(cov_mat["Date"])
cov_mat["Date"]
cov_mat["Date"][1]
cov_mat["Date"][1, 4]
cov_mat["Date"][1, 3]
cov_mat["Date"][1]
as.data.frame(cov_mat["Date"])
as.data.frame(cov_mat["Date"])[1]
as.data.frame(cov_mat["Date"])[1][4:9]
as.data.frame(cov_mat["Date"])["Date"]
as.data.frame(cov_mat["Date"])["Date"][1:4]
as.data.frame(cov_mat["Date"])["Date"]
as.data.frame(cov_mat["Date"])[3,]
as.data.frame(cov_mat["Date"])[3:5,]
cov_mat["Date"][3:5,]
View(cov_mat)
View(cov_mat)
cov_mat_df <- as.data.frame(cov_mat)
cov_mat_df
cov_mat_df[3,]
cov_mat_df[3,1]
cov_mat_df[3,]
cov_mat_df[3:,]
cov_mat_df[3:6,]
cov_mat_df[3:6,]["Date"]
cov_mat_df[nrow(cov_mat["Date"]) - length(roll_corr),]["Date"]
cov_mat_df[nrow(cov_mat["Date"]) - length(roll_corr):]["Date"]
cov_mat_df[nrow(tail(length(roll_corr))]["Date"]
cov_mat_df[nrow(tail(length(roll_corr)))]["Date"]
cov_mat_df[tail(nrow(length(roll_corr))]
cov_mat_df[tail(nrow(length(roll_corr)))]
cov_mat_df[tail(nrow(length(roll_corr))), 3]
cov_mat_df[tail(nrow(length(roll_corr))), 1]
tail(cov_mat_df, nrow(length(roll_corr))
tail(cov_mat_df, nrow(length(roll_corr)))
tail(cov_mat_df, nrow(length(roll_corr)))
tail(cov_mat_df, length(roll_corr))
length(tail(cov_mat_df, length(roll_corr)))
nrow(tail(cov_mat_df, length(roll_corr)))
length(roll_corr)
tail(cov_mat_df, length(roll_corr))["Date"]
year <- as.numeric(format(roll_dates,'%Y'))
roll_dates <- tail(cov_mat_df, length(roll_corr))["Date"]
year <- as.numeric(format(roll_dates,'%Y'))
roll_dates
year <- as.numeric(format(roll_dates,'%Y'))
typeof(roll_dates)
colnames(roll_dates)
typeof(roll_dates["Date"])
roll_dates <- as.data.frame(roll_dates)
roll_dates
typeof(roll_dates)
roll_dates %>%
mutate(Date=as.Date(Date, format = "%Y-%m-%d"))
library(dbplyr)
roll_dates %>%
mutate(Date=as.Date(Date, format = "%Y-%m-%d"))
install.packages('magrittr')
install.packages("magrittr")
library(magrittr)
roll_dates %<>%
mutate(Date = as.Date(Date, format= "%Y-%m-%d"))
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, main = "Daily Price Rolling Correlation")
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Set Perpetual Prudence Themes
theme_set(theme_minimal())
set.seed(336)
#For resetting par - dev.off()
par(family = "serif")
options(scipen = 0.5)
# Import required packages
#install.packages('quantmod')
#install.packages("devtools")
library(quantmod)
#library(tidyverse)
library(glue)
library(zoo)
library(dbplyr)
install.packages('magrittr')
library(magrittr)
# List of companies to look at: https://www.fidelity.co.uk/shares/ftse-100/
# https://dailypik.com/uk100-companies/
### Daily Correlation ###
corr_freq = "Daily"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(dailyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] = paste(ticker, glue('.{corr_freq}Ret'), sep='')
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[3], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[4], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
cor(price_cov[1], price_cov[4], method = 'pearson')
# Rolling correlation
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, main = "Daily Price Rolling Correlation")
install.packages("magrittr")
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, main = "Daily Price Rolling Correlation")
Axis(side=1, labels="Correlation")
Axis(side=1, labels=TRUE)
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, main = "Daily Price Rolling Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = FALSE, main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "Daily Price Rolling Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "90-Day Rolling Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 900, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "90-Day Rolling Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 900, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "900-Day Rolling Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 900, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "900-Day Rolling Daily Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 90, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "90-Day Rolling Daily Price Correlation")
Axis(side=2, labels=TRUE)
corr_freq = "Monthly"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(monthlyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] <-  paste(ticker, glue('.{corr_freq}Ret'), sep='')
#drop NAs
df <- na.omit(df)
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[2], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[2], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
# Rolling correlation
plot(rollapply(price_cov, width = 120, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", ylab = "Correlation", xlab = "Correlation Window", main = "Daily Price Rolling Correlation")
plot(rollapply(price_cov, width = 120, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "12-Month Rolling Monthly Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 12, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "12-Month Rolling Monthly Price Correlation")
plot(rollapply(price_cov, width = 12, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "12-Month Rolling Monthly Price Correlation")
Axis(side=2, labels=TRUE)
plot(rollapply(price_cov, width = 120, function(x) cor(x[,1],x[,4]), by.column = FALSE),
type = 'l', col = "#0c9300", axes=FALSE, ylab = "Correlation", xlab = "", main = "10-Year Rolling Monthly Price Correlation")
Axis(side=2, labels=TRUE)
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Set Perpetual Prudence Themes
theme_set(theme_minimal())
set.seed(336)
#For resetting par - dev.off()
par(family = "serif")
options(scipen = 0.5)
# Import required packages
#install.packages('quantmod')
#install.packages("devtools")
library(quantmod)
#library(tidyverse)
library(glue)
library(zoo)
library(dbplyr)
install.packages('magrittr')
library(magrittr)
# List of companies to look at: https://www.fidelity.co.uk/shares/ftse-100/
# https://dailypik.com/uk100-companies/
### Daily Correlation ###
corr_freq = "Daily"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(dailyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] = paste(ticker, glue('.{corr_freq}Ret'), sep='')
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[3], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[4], method = 'pearson')
#PLOT 4 LINES ON A CHART WITH SOME EXAMPLES OF CORR
cor(price_cov[1], price_cov[4], method = 'pearson')
install.packages("magrittr")
cor(ret_cov[1], ret_cov[4], method = 'pearson')
cor(ret_cov[1], ret_cov[2], method = 'pearson')
cor(ret_cov[1], ret_cov[3], method = 'pearson')
cor(ret_cov[1], ret_cov[4], method = 'pearson')
cor(ret_cov[2], ret_cov[4], method = 'pearson')
cor(ret_cov[2], ret_cov[3], method = 'pearson')
cor(ret_cov[3], ret_cov[4], method = 'pearson')
### Monthly Correlation ###
corr_freq = "Monthly"
company_ticks <- c('AZN.L', 'SHEL.L', 'HSBA.L', 'ULVR.L')
for (ticker in company_ticks) {
#get data and transform
df <- na.omit(data.frame(getSymbols.yahoo(ticker, auto.assign = FALSE)))[paste(ticker, '.Close', sep='')]
#get return df
ret_df <- data.frame(monthlyReturn(as.xts(df))) #CHANGE FREQUENCY
#add date columns and set indexes
df <- cbind(Date=rownames(df), df)
rownames(df) <- 1:nrow(df)
ret_df <- cbind(Date=rownames(ret_df), ret_df)
rownames(ret_df) <- 1:nrow(ret_df)
#merge that shit
df <- merge(df, ret_df, by="Date", all.x=TRUE)
#rename return column
colnames(df)[3] <-  paste(ticker, glue('.{corr_freq}Ret'), sep='')
#drop NAs
df <- na.omit(df)
#assign to close_price_X
assign(paste0("price_ret_", ticker), df)
}
# Cross correlation
# Join
cov_mat <- price_ret_AZN.L
for (pr_df in list(price_ret_HSBA.L, price_ret_SHEL.L, price_ret_ULVR.L)) {
cov_mat <- merge(cov_mat, pr_df, by="Date", all=FALSE)
}
cov_mat
# Select return columns
ret_name_list <- vector(length=4)
for (i in 1:4) {
ret_name_list[i] <- glue('{company_ticks[i]}.{corr_freq}Ret')
}
# Get covariance
ret_cov <- cov_mat[ret_name_list]
cor(ret_cov[2], ret_cov[4], method = 'pearson')
# Select price columns
price_name_list <- vector(length=4)
for (i in 1:4) {
price_name_list[i] <- glue('{company_ticks[i]}.Close')
}
price_cov <- cov_mat[price_name_list]
cor(price_cov[1], price_cov[2], method = 'pearson')
cor(price_cov[1], price_cov[3], method = 'pearson')
cor(price_cov[1], price_cov[4], method = 'pearson')
cor(price_cov[2], price_cov[4], method = 'pearson')
ret_df
cor(price_cov[2], price_cov[3], method = 'pearson')
cor(price_cov[4], price_cov[3], method = 'pearson')
